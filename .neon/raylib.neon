type Rectangle = {
	// turns out past me made neon allow a optional ;
	x float; y float;
	width float; height float
}

type Vector2 = {
	// this reads like something you'd do in go
	// but it's just how the tokenize works
	// you can have multiple statements on the same line
	// or put a newline separator, or the ; from above
	x float y float
}

type Vector3 = {
	x float; y float; z float
}

type Texture2D = {
	id uint;
	width int; height int;
	mipmaps int; format int
}

type Image = {
	data ptr<void>;
	width int; height int;
	mipmaps int; format int
}

type Color = {
	// uchar -> unsigned char, since that is what raylib defines these as(0-255)
	r uchar;
	g uchar;
	b uchar;
	a uchar;
}
type Camera3D = {
	position Vector3
	target Vector3
	up Vector3
	fovy float
	projection int
}
prototype InitWindow(width int, height int, title string) void
prototype LoadImage(path string) Image
prototype LoadTextureFromImage(image Image) Texture2D
prototype UnloadTexture(texture Texture2D) void
prototype UnloadImage(image Image) void
prototype DrawTexture(texture Texture2D, posX int, posY int, tint Color) void
prototype GetScreenWidth() int
prototype GetScreenHeight() int

prototype GetFrameTime() float
prototype IsKeyDown(key int) boolean
prototype IsKeyPressed(key int) boolean
prototype IsKeyReleased(key int) boolean
prototype IsKeyUp(key int) boolean
prototype SetExitKey(key int) void

prototype WindowShouldClose() boolean
prototype ClearBackground(color Color) void
prototype BeginDrawing() void
prototype DrawRectangleRec(rect Rectangle, color Color) void
prototype DrawRectangle(x int, y int, width int, height int, color Color) void
prototype DrawRectangleLines(x int, y int, width int, height int, color Color) void
prototype DrawRectangleV(position Vector2, width float, height float, color Color) void
prototype DrawCircle(centerX int, centerY int, rad float, color Color) void
prototype DrawLine(startX int, startY int, endX int, endY int, color Color) void
prototype DrawLineEx(start Vector2, endPos Vector2, thickness float, color Color) void

prototype BeginMode3D(camera Camera3D) void
prototype DrawGrid(slices int, spacing float) void
prototype DrawLine3D(start Vector3, endPos Vector3, color Color) void
prototype DrawSphere(center Vector3, radius float, color Color) void
prototype DrawSphereEx(center Vector3, radius float, rings int, slices int, color Color) void
prototype DrawCylinder(position Vector3, radiusTop float, radiusBottom float, height float, slices int, color Color) void
prototype DrawCylinderWires(position Vector3, radiusTop float, radiusBottom float, height float, slices int, color Color) void
prototype DrawCube(position Vector3, width float, height float, length float, color Color) void
prototype DrawCubeWires(position Vector3, width float, height float, length float, color Color) void
prototype EndMode3D() void
prototype DrawTextureRec(texture Texture2D, source Rectangle, position Vector2, tint Color) void
prototype SetTargetFPS(fps int) void
prototype EndDrawing() void
prototype CloseWindow() void
//RLAPI int MeasureText(const char *text, int fontSize);                                      // Measure string width for default font
prototype MeasureText(text string, fontSize int) int
//RLAPI void DrawText(const char *text, int posX, int posY, int fontSize, Color color);       // Draw text (using default font)
prototype DrawText(text string, posX int, posY int, fontSize int, color Color) void

prototype IsMouseButtonPressed(button int) boolean
prototype IsMouseButtonDown(button int) boolean
prototype IsMouseButtonReleased(button int) boolean
prototype IsMouseButtonUp(button int) boolean

prototype GetMouseX() int
prototype GetMouseY() int
prototype GetMousePosition() Vector2
prototype GetMouseDelta() Vector2

prototype SetMousePosition(x int, y int) void
prototype SetMouseOffset(offsetX int, offsetY int) void
prototype SetMouseScale(scaleX float, scaleY float) void
prototype GetMouseWheelMove() float
prototype GetMouseWheelMoveV() Vector2
prototype SetMouseCursor(cursor int) void                        // Set mouse cursor
prototype SetMouseCursor(cursor int) void

prototype TextFormat(text string, ...) string


// Mouse buttons
enum MouseButton = {
    MOUSE_BUTTON_LEFT    = 0       // Mouse button left
    MOUSE_BUTTON_RIGHT   = 1       // Mouse button right
    MOUSE_BUTTON_MIDDLE  = 2       // Mouse button middle (pressed wheel)
    MOUSE_BUTTON_SIDE    = 3       // Mouse button side (advanced mouse device)
    MOUSE_BUTTON_EXTRA   = 4       // Mouse button extra (advanced mouse device)
    MOUSE_BUTTON_FORWARD = 5       // Mouse button forward (advanced mouse device)
    MOUSE_BUTTON_BACK    = 6       // Mouse button back (advanced mouse device)
}
enum CameraProjection = {
    CAMERA_PERSPECTIVE = 0         // Perspective projection
    CAMERA_ORTHOGRAPHIC             // Orthographic projection
}

enum MouseCursor = {
	MOUSE_CURSOR_DEFAULT      = 0
	MOUSE_CURSOR_ARROW        = 1
	MOUSE_CURSOR_IBEAM        = 2
	MOUSE_CURSOR_CROSSHAIR    = 3
	MOUSE_CURSOR_POINTING_HAND = 4
	MOUSE_CURSOR_RESIZE_EW    = 5
	MOUSE_CURSOR_RESIZE_NS    = 6
	MOUSE_CURSOR_RESIZE_NWSE  = 7
	MOUSE_CURSOR_RESIZE_NESW  = 8
	MOUSE_CURSOR_RESIZE_ALL   = 9
	MOUSE_CURSOR_NOT_ALLOWED  = 10
}

const RED Color = Cast<Color>({255,0,0,255})
const GREEN Color = Cast<Color>({0,255,0,255})
const BLUE Color = Cast<Color>({0,0,255,255})
const BLACK Color = Cast<Color>({0,0,0,255})
const WHITE Color = Cast<Color>({255,255,255,255})
const DARKGRAY Color = Cast<Color>({100,100,100,255})
const GRAY Color = Cast<Color>({128,128,128,255})
const LIGHTGRAY Color = Cast<Color>({200,200,200,255})
const KEY_ESCAPE int = 256
const KEY_ENTER int = 257
// other keys can be added, also, if you want A-Z, just use the ascii code 'A' is 65, KEY_A is also 65


////// ---------------- //////
//     math functions      //
prototype Vector2Add(vec1 Vector2, vec2 Vector2) Vector2
prototype Vector2Scale(vec Vector2, scale float) Vector2
prototype Vector2Clamp(vec1 Vector2, min Vector2, max Vector2) Vector2
